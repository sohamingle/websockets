generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fromUser   User     @relation(fields: [fromUserId], references: [id])
  fromUserId String   @db.ObjectId
  friendUser Friend   @relation(fields: [toUserId], references: [friendId])
  toUserId   String   @db.ObjectId
  text       String
  createdAt  DateTime @db.Timestamp @default(now())
}

model Friend {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  friendUser User     @relation(fields: [friendId], references: [id])
  friendId   String   @unique @db.ObjectId
  chats      Chat[]
  createdAt  DateTime @db.Timestamp @default(now())
}

model FriendRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId String   @db.ObjectId
  status     String // Pending, Accepted, Rejected
  createdAt  DateTime @db.Timestamp @default(now())
}

model User {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  friends                Friend[]
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  chats                  Chat[]
  accounts               Account[]
  sessions               Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
